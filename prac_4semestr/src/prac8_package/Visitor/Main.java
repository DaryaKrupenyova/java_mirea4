package prac8_package.Visitor;

public class Main {
    public static void main(String[] args) {
        Attraction[] attractions = {new Carousel(), new Slide()};
        Visitor visitor = new AmusementParkVisitor();

        for (Attraction attraction : attractions) {
            attraction.accept(visitor);
        }
    }
}

/*
1. Интерфейс Attraction:
   Этот интерфейс определяет метод accept, который принимает объект посетителя. Этот метод будет использоваться для
   вызова метода посетителя, соответствующего данной аттракции.

2. Конкретные элементы (аттракции):
   Классы Carousel и Slide реализуют интерфейс Attraction. Каждый из них также имеет свой уникальный метод
   (ride и slide), который характеризует аттракцию.

3. Интерфейс Visitor:
   Этот интерфейс определяет методы visit для каждого типа аттракции. Каждый метод принимает соответствующий тип
   аттракции в качестве параметра.

4. Конкретный посетитель (AmusementParkVisitor):
   Класс AmusementParkVisitor реализует интерфейс Visitor. Он представляет посетителя парка развлечений и определяет,
   что происходит, когда посетитель посещает каждую аттракцию.

5. Тестирование в методе main:
   В методе main создается массив аттракций (карусель и горка) и объект посетителя парка развлечений. Затем каждая
   аттракция поочередно принимает посетителя с помощью метода accept. В результате вызываются соответствующие методы
   посетителя для каждой аттракции, которые выводят сообщение о выборе аттракции посетителем.

Таким образом, паттерн "Посетитель" позволяет добавлять новые операции без изменения классов элементов, используя для
этого новые классы посетителей.
*/