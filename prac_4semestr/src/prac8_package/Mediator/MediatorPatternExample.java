package prac8_package.Mediator;

public class MediatorPatternExample {
    public static void main(String[] args) {
        ChatMediator mediator = new ChatMediatorImpl();

        User user1 = new ChatUser(mediator, "Пользователь 1");
        User user2 = new ChatUser(mediator, "Пользователь 2");
        User user3 = new ChatUser(mediator, "Пользователь 3");
        User user4 = new ChatUser(mediator, "Пользователь 4");

        mediator.addUser(user1);
        mediator.addUser(user2);
        mediator.addUser(user3);
        mediator.addUser(user4);

        user1.send("Привет, есть кто-нибудь?");
        user2.send("Привет, Пользователь 1");
        user3.send("Привет, Пользователи!");
    }
}

/*
1. Интерфейс ChatMediator:
* Этот интерфейс определяет методы, которые должны быть реализованы всеми посредниками. В данном случае у нас есть
  методы sendMessage для отправки сообщения и addUser для добавления нового пользователя.

2. Конкретный класс ChatMediatorImpl:
* Это конкретная реализация интерфейса ChatMediator. Она содержит список пользователей и реализует методы интерфейса.
* Метод sendMessage проходит по списку пользователей и отправляет сообщение каждому пользователю, кроме отправителя.
* Метод addUser добавляет нового пользователя в список пользователей чата.

3. Абстрактный класс User:
* Этот класс представляет участника чата.
* Он содержит ссылку на объект посредника и имя пользователя.
* Он объявляет абстрактные методы send и receive, которые будут реализованы в конкретных классах участников.

4. Конкретный класс ChatUser:
* Это конкретная реализация класса User.
* Метод send отправляет сообщение через посредника и выводит информацию о том, кто отправил сообщение.
* Метод receive выводит информацию о том, кто получил сообщение.

5. Класс MediatorPatternExample:
* Это класс, в котором создаются объекты посредника и участников, и они взаимодействуют друг с другом.
* Мы создаем объект ChatMediatorImpl и несколько объектов ChatUser, добавляем их в посредник, а затем участники
  отправляют сообщения друг другу.

Таким образом, паттерн "Посредник" позволяет уменьшить связанность между объектами, позволяя им взаимодействовать
через посредника, что делает систему более гибкой и расширяемой.
*/