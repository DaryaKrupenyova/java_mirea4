package prac7_package.Facade;

public class Main {
    public static void main(String[] args) {
        Facade facade = new Facade();
        facade.processDataAndDisplay();
    }
}

/*
1. Подсистемы:
* Database (База данных): Этот класс представляет собой подсистему для работы с базой данных. Он содержит методы для
  подключения к базе данных (connect()) и отключения от нее (disconnect()).
* DataProcessor (Обработчик данных): Этот класс представляет собой подсистему для обработки данных. В нашем примере он
  содержит только один метод processData(), который просто выводит сообщение о том, что данные обрабатываются.
* Presentation (Отображение данных): Этот класс представляет собой подсистему для отображения данных. В нем есть метод
  displayData(), который также просто выводит сообщение о том, что данные отображаются.

2. Фасад (Facade):
* Класс Facade создает экземпляры каждой из подсистем: Database, DataProcessor и Presentation. Это позволяет ему
  управлять всей функциональностью через единую точку доступа.
* Метод processDataAndDisplay() является упрощенным интерфейсом для работы с подсистемами. При вызове этого метода
  происходит последовательное выполнение следующих действий:
    ** Подключение к базе данных.
    ** Обработка данных.
    ** Отображение данных.
    ** Отключение от базы данных.

3. Пример использования:
* В методе main() создается экземпляр класса Facade.
* Затем вызывается метод processDataAndDisplay() у этого экземпляра, что инициирует последовательное выполнение
операций подключения к базе данных, обработки данных, отображения данных и отключения от базы данных через фасад.

Таким образом, паттерн Фасад позволяет скрыть сложность взаимодействия между различными компонентами подсистемы за
одним упрощенным интерфейсом, обеспечивая удобство использования и поддержки кода.
*/