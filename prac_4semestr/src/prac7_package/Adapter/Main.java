package prac7_package.Adapter;

public class Main {
    public static void main(String[] args) {
        // Создание обычной книги
        Book book = new PaperbackBook("Java: Полное руководство", "Герберт Шилдт", 1088);

        // Создание электронной книги
        EBook ebook = new KindleEBook("Java: Полное руководство", "Герберт Шилдт", 1088, "Kindle");

        // Адаптер для работы с электронной книгой через интерфейс обычной книги
        Book ebookAdapter = new EBookAdapter(ebook);

        // Использование обычной книги
        System.out.println("Обычная книга:");
        System.out.println("Название: " + book.getTitle());
        System.out.println("Автор: " + book.getAuthor());
        System.out.println("Количество страниц: " + book.getPageCount());

        // Использование адаптера для работы с электронной книгой через интерфейс обычной книги
        System.out.println("\nЭлектронная книга через адаптер:");
        System.out.println("Название: " + ebookAdapter.getTitle());
        System.out.println("Автор: " + ebookAdapter.getAuthor());
        System.out.println("Количество страниц: " + ebookAdapter.getPageCount());
    }
}

/*
1. Интерфейс Book и класс PaperbackBook:
* Book - это интерфейс, который определяет основные операции, которые можно выполнить с книгой. Он содержит методы
  getTitle(), getAuthor() и getPageCount().
* PaperbackBook - это реализация интерфейса Book. Он представляет обычную книгу с заголовком, автором и
  количеством страниц.

2. Интерфейс EBook и класс KindleEBook:
* EBook - это интерфейс, который определяет операции для работы с электронными книгами. Он также содержит методы
  getTitle(), getAuthor() и getPageCount(), а также новый метод getFormat(), который возвращает формат электронной
  книги.
* KindleEBook - это реализация интерфейса EBook. Он представляет электронную книгу с заголовком, автором, количеством
  страниц и форматом.

3. Класс EBookAdapter:
* Этот класс является ключевым компонентом паттерна Адаптер. Он реализует интерфейс Book, который необходим для
  совместимости с другими частями системы.
* EBookAdapter содержит экземпляр EBook, который он "адаптирует" к интерфейсу Book.
* Методы getTitle(), getAuthor() и getPageCount() класса EBookAdapter делегируют соответствующие вызовы методам EBook,
  что позволяет использовать электронную книгу через интерфейс обычной книги.

4. Класс Main:
* В методе main создаются объекты PaperbackBook и KindleEBook, представляющие обычную и электронную книги соответственно.
* Затем создается объект EBookAdapter, который позволяет использовать электронную книгу через интерфейс обычной книги.
* Наконец, выводятся информация об обычной книге и электронной книге через адаптер для наглядного сравнения.

Таким образом, паттерн Адаптер позволяет использовать существующие классы с несовместимыми интерфейсами вместе,
обеспечивая их взаимодействие через общий интерфейс. В данном случае он позволяет использовать электронную книгу так,
как будто это обычная книга, благодаря адаптеру, который обеспечивает соответствие интерфейсу Book.
*/
